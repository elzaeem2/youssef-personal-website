// Test auto-deploy settings and GitHub integration
const https = require('https');

console.log('๐ ูุญุต ุฅุนุฏุงุฏุงุช ุงููุดุฑ ุงูุชููุงุฆู...\n');

// Test GitHub repository access
function testGitHubRepo() {
    return new Promise((resolve) => {
        console.log('๐ ูุญุต ูุณุชูุฏุน GitHub:\n');
        
        const options = {
            hostname: 'api.github.com',
            port: 443,
            path: '/repos/elzaeem2/youssef-personal-website',
            method: 'GET',
            headers: {
                'User-Agent': 'Auto-Deploy-Test'
            }
        };

        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const repo = JSON.parse(data);
                    console.log(`   ุงุณู ุงููุณุชูุฏุน: ${repo.name}`);
                    console.log(`   ุงููุฑุน ุงูุงูุชุฑุงุถู: ${repo.default_branch}`);
                    console.log(`   ุขุฎุฑ ุชุญุฏูุซ: ${new Date(repo.updated_at).toLocaleString('ar-EG')}`);
                    console.log(`   ุญุงูุฉ ุงููุณุชูุฏุน: ${repo.private ? 'ุฎุงุต' : 'ุนุงู'}`);
                    console.log(`   ุนุฏุฏ ุงูุชุญุฏูุซุงุช: ${repo.size} KB`);
                    
                    resolve(true);
                } catch (error) {
                    console.log(`   โ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช: ${error.message}`);
                    resolve(false);
                }
            });
        });

        req.on('error', (e) => {
            console.log(`   โ ุฎุทุฃ ูู ุงูุงุชุตุงู: ${e.message}`);
            resolve(false);
        });

        req.end();
    });
}

// Test recent commits and their deploy status
function testRecentCommits() {
    return new Promise((resolve) => {
        console.log('\n๐ ูุญุต ุขุฎุฑ ุงูุชุญุฏูุซุงุช:\n');
        
        const options = {
            hostname: 'api.github.com',
            port: 443,
            path: '/repos/elzaeem2/youssef-personal-website/commits?per_page=3',
            method: 'GET',
            headers: {
                'User-Agent': 'Auto-Deploy-Test'
            }
        };

        const req = https.request(options, (res) => {
            let data = '';
            
            res.on('data', (chunk) => {
                data += chunk;
            });
            
            res.on('end', () => {
                try {
                    const commits = JSON.parse(data);
                    console.log(`   ุขุฎุฑ ${commits.length} ุชุญุฏูุซุงุช:`);
                    
                    commits.forEach((commit, index) => {
                        const date = new Date(commit.commit.author.date);
                        const message = commit.commit.message.split('\n')[0];
                        const sha = commit.sha.substring(0, 7);
                        
                        console.log(`   ${index + 1}. [${sha}] ${date.toLocaleString('ar-EG')}`);
                        console.log(`      ${message.substring(0, 80)}...`);
                    });
                    
                    resolve(commits);
                } catch (error) {
                    console.log(`   โ ุฎุทุฃ ูู ุชุญููู ุงูุจูุงูุงุช: ${error.message}`);
                    resolve([]);
                }
            });
        });

        req.on('error', (e) => {
            console.log(`   โ ุฎุทุฃ ูู ุงูุงุชุตุงู: ${e.message}`);
            resolve([]);
        });

        req.end();
    });
}

// Test site deployment status
function testSiteDeployment() {
    return new Promise((resolve) => {
        console.log('\n๐ ูุญุต ุญุงูุฉ ูุดุฑ ุงููููุน:\n');
        
        const options = {
            hostname: 'youssef-personal-website.netlify.app',
            port: 443,
            path: '/',
            method: 'HEAD'
        };

        const req = https.request(options, (res) => {
            console.log(`   ุญุงูุฉ ุงููููุน: ${res.statusCode === 200 ? 'โ ูุชุงุญ' : 'โ ุบูุฑ ูุชุงุญ'}`);
            console.log(`   ุขุฎุฑ ุชุนุฏูู: ${res.headers['last-modified'] || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`   ููุน ุงููุญุชูู: ${res.headers['content-type'] || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`   ุงูุฎุงุฏู: ${res.headers['server'] || 'ุบูุฑ ูุญุฏุฏ'}`);
            console.log(`   Cache Control: ${res.headers['cache-control'] || 'ุบูุฑ ูุญุฏุฏ'}`);
            
            // Check for Netlify-specific headers
            const netlifyHeaders = Object.keys(res.headers).filter(h => h.startsWith('x-nf-'));
            if (netlifyHeaders.length > 0) {
                console.log(`   ุฑุคูุณ Netlify: ${netlifyHeaders.join(', ')}`);
            }
            
            resolve(res.statusCode === 200);
        });

        req.on('error', (e) => {
            console.log(`   โ ุฎุทุฃ: ${e.message}`);
            resolve(false);
        });

        req.end();
    });
}

// Test webhook functionality (simulated)
function testWebhookSetup() {
    console.log('\n๐ ูุญุต ุฅุนุฏุงุฏ Webhooks:\n');
    
    // Since we can't directly test webhooks without API access,
    // we'll provide guidance on what to check
    console.log('   ููุชุญูู ูู ุฅุนุฏุงุฏ Webhooks:');
    console.log('   1. ุงุฐูุจ ุฅูู GitHub โ Settings โ Webhooks');
    console.log('   2. ุชุฃูุฏ ูู ูุฌูุฏ webhook ูู Netlify');
    console.log('   3. ุชุญูู ูู ุฃู ุงูู webhook ูุณุชูุฏู events: push, pull_request');
    console.log('   4. ุชุฃูุฏ ูู ุฃู ุงูุญุงูุฉ "Active" โ');
    
    console.log('\n   ุฃู ูู Netlify:');
    console.log('   1. ุงุฐูุจ ุฅูู Site Settings โ Build & Deploy');
    console.log('   2. ุชุญูู ูู Repository settings');
    console.log('   3. ุชุฃูุฏ ูู ุฃู Auto-deploy ููุนู');
    
    return true;
}

// Main test function
async function runAutoDeployTests() {
    console.log('๐ ุจุฏุก ูุญุต ุฅุนุฏุงุฏุงุช ุงููุดุฑ ุงูุชููุงุฆู\n');
    console.log('=' .repeat(50) + '\n');
    
    // Test 1: GitHub Repository
    const repoWorking = await testGitHubRepo();
    
    // Test 2: Recent Commits
    const commits = await testRecentCommits();
    
    // Test 3: Site Deployment
    const siteWorking = await testSiteDeployment();
    
    // Test 4: Webhook Setup (guidance)
    const webhookInfo = testWebhookSetup();
    
    // Generate report
    console.log('\n๐ ุชูุฑูุฑ ูุญุต ุงููุดุฑ ุงูุชููุงุฆู:');
    console.log('=' .repeat(40));
    
    const issues = [];
    const recommendations = [];
    
    if (!repoWorking) {
        issues.push('ูุดููุฉ ูู ุงููุตูู ุฅูู ูุณุชูุฏุน GitHub');
        recommendations.push('ุชุญูู ูู ุตุญุฉ ุฑุงุจุท ุงููุณุชูุฏุน ูู ุฅุนุฏุงุฏุงุช Netlify');
    }
    
    if (commits.length === 0) {
        issues.push('ูุง ุชูุฌุฏ ุชุญุฏูุซุงุช ุญุฏูุซุฉ ูู GitHub');
        recommendations.push('ุชุฃูุฏ ูู ุฃู ุงูุชุญุฏูุซุงุช ูุชู ุฑูุนูุง ุฅูู ุงููุฑุน ุงูุตุญูุญ');
    }
    
    if (!siteWorking) {
        issues.push('ุงููููุน ุบูุฑ ูุชุงุญ');
        recommendations.push('ุชุญูู ูู ุญุงูุฉ ุงููุดุฑ ูู ููุญุฉ ุชุญูู Netlify');
    }
    
    console.log(`\n๐ ุงููุดุงูู ุงูููุชุดูุฉ: ${issues.length}`);
    issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. โ ${issue}`);
    });
    
    console.log(`\n๐ก ุงูุชูุตูุงุช: ${recommendations.length}`);
    recommendations.forEach((rec, index) => {
        console.log(`   ${index + 1}. ๐ง ${rec}`);
    });
    
    console.log('\n๐ฏ ุฎุทูุงุช ุงูุชุญูู ูู ุงููุดุฑ ุงูุชููุงุฆู:');
    console.log('   1. ุชุฃูุฏ ูู ุชูุนูู Netlify Identity ู Git Gateway');
    console.log('   2. ุชุญูู ูู ุฅุนุฏุงุฏุงุช Repository ูู Netlify');
    console.log('   3. ุชุฃูุฏ ูู ุฃู Branch to deploy ูู "main"');
    console.log('   4. ุชุญูู ูู Build settings (Build command, Publish directory)');
    console.log('   5. ุฑุงุฌุน Deploy log ูู Netlify ููุฃุฎุทุงุก');
    
    console.log('\n๐ ุฑูุงุจุท ูููุฏุฉ:');
    console.log('   โข ุฅุนุฏุงุฏุงุช Build: https://app.netlify.com/projects/youssef-personal-website/settings/deploys');
    console.log('   โข ุณุฌู ุงููุดุฑ: https://app.netlify.com/projects/youssef-personal-website/deploys');
    console.log('   โข GitHub Webhooks: https://github.com/elzaeem2/youssef-personal-website/settings/hooks');
    
    return {
        repoWorking,
        commitsFound: commits.length > 0,
        siteWorking,
        issuesCount: issues.length
    };
}

runAutoDeployTests().then((results) => {
    console.log('\n๐ ุงูุชูู ูุญุต ุงููุดุฑ ุงูุชููุงุฆู');
    
    if (results.issuesCount === 0) {
        console.log('โ ุฅุนุฏุงุฏุงุช ุงููุดุฑ ุงูุชููุงุฆู ุชุจุฏู ุตุญูุญุฉ');
        console.log('๐ ุงููุดููุฉ ูุฏ ุชููู ูู Editorial Workflow ุฃู Identity/Gateway');
    } else {
        console.log(`โ ุชู ุงูุชุดุงู ${results.issuesCount} ูุดููุฉ ุชุญุชุงุฌ ุฅุตูุงุญ`);
    }
});
